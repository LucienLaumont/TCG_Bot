import discord
import httpx
from discord.ext import commands
from sqlalchemy.orm import Session
from random import randint
from .utils import compare_numeric_values
import os

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# R√©cup√©rer l'URL Ngrok depuis le fichier .env
NGROK_URL = os.getenv("NGROK_URL")

# V√©rifier si NGROK_URL est d√©fini
if not NGROK_URL:
    raise ValueError("NGROK_URL is not defined in the .env file!")

@bot.command(name="register")
async def register(ctx):
    discord_id = str(ctx.author.id)
    player_name = ctx.author.name

    async with httpx.AsyncClient() as client:
        # Appel √† l'API via l'URL Ngrok
        response = await client.get(f"{NGROK_URL}/api/player/{discord_id}")
        print(f"{NGROK_URL}/api/player/{discord_id}")        
        if response.status_code == 200:
            await ctx.send(f"{ctx.author.mention}, vous √™tes d√©j√† enregistr√© dans la base de donn√©es.")
        elif response.status_code == 404:
            # Cr√©er un nouveau joueur via l'API
            data = {"discord_id": discord_id, "player_name": player_name}
            print(data)    
            create_response = await client.post(f"{NGROK_URL}/api/player/", json=data)
            print(create_response)
            if create_response.status_code == 200:
                await ctx.send(f"{ctx.author.mention}, vous avez √©t√© enregistr√© avec succ√®s dans la base de donn√©es !")
            else:
                await ctx.send(f"{ctx.author.mention}, une erreur s'est produite lors de votre enregistrement.")
        else:
            await ctx.send(f"{ctx.author.mention}, une erreur inattendue s'est produite. Veuillez r√©essayer plus tard.")

@bot.command(name="pokedl")
async def pokedl(ctx):
    discord_id = str(ctx.author.id)

    async with httpx.AsyncClient() as client:
        # V√©rifie si le joueur est d√©j√† enregistr√©
        response = await client.get(f"{NGROK_URL}/api/player/{discord_id}")
        
        if response.status_code == 404:
            await ctx.send(f"{ctx.author.mention}, vous n'√™tes pas encore enregistr√© dans la base de donn√©es.\nLancez la commande **!register**.")
        elif response.status_code == 200:
            # R√©cup√©rer un Pok√©mon al√©atoire
            pokedex_number = randint(1, 801)
            pokemon_response = await client.get(f"{NGROK_URL}/api/pokemon/{pokedex_number}")
            
            if pokemon_response.status_code != 200:
                await ctx.send(f"{ctx.author.mention}, impossible de r√©cup√©rer les informations du Pok√©mon.")
                return

            # Initialiser uniquement avec discord_id et pokedex_number
            session_data = {
                "discord_id": discord_id,
                "pokedex_number": pokedex_number
            }

            # Cr√©er une nouvelle session via l'API
            session_response = await client.post(f"{NGROK_URL}/api/pokemonsession/", json=session_data)
            
            if session_response.status_code == 200:
                # Afficher un embed avec les champs vides (ou ? si manquant)
                embed = discord.Embed(
                    title="Session Pok√©mon : Trouvez les bonnes r√©ponses !",
                    description="La session a commenc√© ! Essayez de deviner les informations du Pok√©mon.",
                    color=discord.Color.red()
                )

                # D√©finir les cat√©gories avec un ? car elles sont initialis√©es √† Null
                categories = {
                    "Nom (FR)": " ",
                    "Type 1": " ",
                    "Type 2": " ",
                    "√âvolution": " ",
                    "Poids (kg)": " ",
                    "Taille (m)": " ",
                    "G√©n√©ration": " ",
                    "Classification": " ",
                }

                # Ajouter chaque champ √† l'embed avec le carr√© rouge
                for category, answer in categories.items():
                    embed.add_field(
                        name=f"**{category} : {answer}**",
                        value="üü•",
                        inline=True
                    )

                # Envoyer l'embed au joueur
                await ctx.send(embed=embed)
            else:
                # En cas d'erreur lors de la cr√©ation de la session
                error_message = session_response.json().get("detail", "Erreur inconnue")
                await ctx.send(f"{ctx.author.mention}, une erreur s'est produite lors de la cr√©ation de la session : {error_message}")
        else:
            await ctx.send(f"{ctx.author.mention}, une erreur inattendue s'est produite. Veuillez r√©essayer plus tard.")

@bot.command(name="guess")
async def guess(ctx, *, pokemon_guess: str):
    discord_id = str(ctx.author.id)

    async with httpx.AsyncClient() as client:
        # V√©rifier si le joueur a une session active
        session_response = await client.get(f"{NGROK_URL}/api/pokemonsession/active/{discord_id}")

        if session_response.status_code == 404:
            await ctx.send(f"{ctx.author.mention}, vous n'avez pas de session en cours.\nLancez la commande **!pokedl** pour commencer une session.")
            return

        # R√©cup√©rer les donn√©es de la session actuelle
        session_data = session_response.json()
        pokedex_number_target = session_data['pokedex_number']

        # R√©cup√©rer les informations du Pok√©mon cible (√† deviner)
        target_pokemon_response = await client.get(f"{NGROK_URL}/api/pokemon/{pokedex_number_target}")
        if target_pokemon_response.status_code == 404:
            await ctx.send(f"{ctx.author.mention}, une erreur est survenue. Le Pok√©mon cible est introuvable.")
            return
        target_pokemon = target_pokemon_response.json()

        # Rechercher le Pok√©mon devin√©
        search_response = await client.get(f"{NGROK_URL}/api/pokemon/search/?name={pokemon_guess}")
        if search_response.status_code == 404:
            await ctx.send(f"{ctx.author.mention}, aucun Pok√©mon trouv√© avec ce nom. Essayez encore.")
            return

        guessed_pokemon = search_response.json()

        # Appeler l‚ÄôAPI pour comparer les r√©ponses et mettre √† jour la session
        update_response = await client.put(f"{NGROK_URL}/api/pokemonsession/update/{discord_id}", json={"guessed_pokemon": guessed_pokemon})

        if update_response.status_code == 200:
            updated_session = update_response.json()

            # Cr√©er l'embed avec les cat√©gories mises √† jour
            # Cr√©er l'embed avec les cat√©gories mises √† jour
            embed = discord.Embed(
                title=f"Session Pok√©mon : {ctx.author.name}",
                description="Voici votre progression dans la session actuelle.",
                color=discord.Color.green()
            )

            # Comparer les champs entre le Pok√©mon cible et le Pok√©mon soumis
            categories = {
                "name_fr": {"label": "Nom (FR)", "target_value": target_pokemon.get("name_fr"), "guessed_value": guessed_pokemon.get("name_fr")},
                "type1": {"label": "Type 1", "target_value": target_pokemon.get("type1"), "guessed_value": guessed_pokemon.get("type1")},
                "type2": {"label": "Type 2", "target_value": target_pokemon.get("type2"), "guessed_value": guessed_pokemon.get("type2")},
                "evolution": {"label": "√âvolution", "target_value": target_pokemon.get("evolution"), "guessed_value": guessed_pokemon.get("evolution")},
                "weight_kg": {"label": "Poids (kg)", "target_value": target_pokemon.get("weight_kg"), "guessed_value": guessed_pokemon.get("weight_kg")},
                "height_m": {"label": "Taille (m)", "target_value": target_pokemon.get("height_m"), "guessed_value": guessed_pokemon.get("height_m")},
                "generation": {"label": "G√©n√©ration", "target_value": target_pokemon.get("generation"), "guessed_value": guessed_pokemon.get("generation")},
                "classfication": {"label": "Classification", "target_value": target_pokemon.get("classfication"), "guessed_value": guessed_pokemon.get("classfication")},
            }

            for key, info in categories.items():
                if key in ["weight_kg", "height_m"]:
                    # Comparer les valeurs num√©riques si elles sont pr√©sentes
                    if info["target_value"] and info["guessed_value"]:
                        emoji = compare_numeric_values(info["target_value"], info["guessed_value"])
                    else:
                        emoji = "‚ùì"  # Si les valeurs sont manquantes ou incorrectes
                else:
                    # Comparaison normale pour les autres champs
                    emoji = "üü©" if info["guessed_value"] == info["target_value"] else "üü•"

                # D√©terminer la valeur √† afficher
                value_display = info["guessed_value"] if info["guessed_value"] is not None else "?"

                # Ajouter le champ √† l'embed
                embed.add_field(name=f"**{info['label']} : {value_display}**", value=f"{emoji} ", inline=True)

            # Envoyer l'embed au joueur
            await ctx.send(embed=embed)
        else:
            await ctx.send(f"{ctx.author.mention}, une erreur s'est produite lors de la mise √† jour de la session.")